{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CameraControls","useThree","camera","domElement","gl","controlsRef","useRef","useFrame","current","update","ref","args","MeshAnim","position","grid","width","height","sep","zOfXYT","colorOfXYZT","anim","init","mesh","t","useMemo","positions","colors","normals","yi","xi","x","y","z","push","Float32Array","indices","i","Uint16Array","posRef","colorRef","array","c","needsUpdate","attachObject","count","length","itemSize","attach","side","THREE","vertexColors","GrowingExp","cyc","Math","sin","exp","cos","Ripple","AnimationCanvas","colorManagement","fov","fallback","extend","OrbitControls","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08b21379.chunk.js","sourcesContent":["import './App.scss';\nimport * as THREE from 'three';\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useFrame, useThree } from '@react-three/fiber';\nimport { Suspense, useMemo, useRef } from 'react';\nextend({OrbitControls})\n\nfunction CameraControls(){\n  const {\n    camera,\n    gl: {domElement}\n  } = useThree();\n\n  const controlsRef = useRef();\n  useFrame(() => controlsRef.current.update())\n\n  return (\n    <orbitControls\n      ref={controlsRef}\n      args={[camera, domElement]}\n      // autoRotate\n      // autoRotateSpeed={-0.2}\n    />\n  );\n}\n\nfunction MeshAnim({\n  position,\n  grid: {\n    width,\n    height,\n    sep\n  },\n  zOfXYT,\n  colorOfXYZT,\n  anim: {\n    init,\n    update\n  }\n}) {\n  const mesh = useRef()\n  let t = init;\n\n  let {positions, colors, normals} = useMemo(() => {\n    let positions = [], colors = [], normals = []\n\n    for(let yi = 0; yi < height; yi++){\n      for(let xi = 0; xi < width; xi++){\n        let x = sep*(xi - (width-1.) / 2.)\n        let y = sep*(yi - (height+1.) / 2.)\n        let z = zOfXYT(x, y, t)\n        positions.push(x, y, z)\n        colors.push(...colorOfXYZT(x, y, z, t))\n        normals.push(0, 0, 1)\n      }\n    }\n    positions = new Float32Array(positions)\n    colors = new Float32Array(colors)\n    normals = new Float32Array(normals)\n\n    return {\n      positions,\n      colors,\n      normals\n    }\n  }, [width, height, sep, zOfXYT, colorOfXYZT, t])\n\n  let indices = useMemo(() => {\n    let indices = []\n    let i = 0\n    for(let yi = 0; yi < height-1; yi++){\n      for(let xi = 0; xi < width-1; xi++){\n        indices.push(i, i+1, i+width+1)\n        indices.push(i+width+1, i+width, i)\n        i++\n      }\n      i++\n    }\n    return new Uint16Array(indices)\n  }, [width, height])\n\n  let posRef = useRef(), colorRef = useRef()\n  useFrame(() => {\n    t = update(t)\n    \n    const positions = posRef.current.array, colors = colorRef.current.array;\n\n    let i = 0\n    for(let yi = 0; yi < height; yi++){\n      for(let xi = 0; xi < width; xi++){\n        positions[i+2] = zOfXYT(positions[i], positions[i+1], t)\n\n        let c = colorOfXYZT(positions[i], positions[i+1], positions[i+2], t)\n        colors[i] = c[0]\n        colors[i+1] = c[1]\n        colors[i+2] = c[2]\n        i += 3\n      }\n    }\n\n    posRef.current.needsUpdate = true;\n    colorRef.current.needsUpdate = true;\n  })\n\n  return (\n    <>\n      <mesh position={position} ref={mesh}>\n        <bufferGeometry>\n          <bufferAttribute \n            ref={posRef}\n            attachObject={['attributes', 'position']}\n            array={positions}\n            count={positions.length / 3}\n            itemSize={3}\n          />\n          <bufferAttribute \n            ref={colorRef}\n            attachObject={['attributes', 'color']}\n            array={colors}\n            count={colors.length / 3}\n            itemSize={3}\n          />\n          <bufferAttribute \n            attachObject={['attributes', 'normal']}\n            array={normals}\n            count={normals.length / 3}\n            itemSize={3}\n          />\n          <bufferAttribute\n            attach=\"index\"\n            array={indices}\n            count={indices.length}\n            itemSize={1}\n          />\n        </bufferGeometry>\n        <meshPhongMaterial side={THREE.DoubleSide} vertexColors={true}/>\n      </mesh>\n      \n    </>\n  );\n}\n\nfunction GrowingExp({position}){\n  const zOfXYT = (x, y, t) => {\n    let cyc = 1+Math.sin(t/250)\n\n    return cyc*\n    5*Math.exp(-1*(x**2 + y**2)**(0.75)/cyc);\n  }\n\n  const colorOfXYZT = (x, y, z, t) => {\n    return [0.1*Math.cos(z), z/10, 0.2] // r, g, b\n  }\n\n  return (\n    <MeshAnim\n      position={position}\n      grid={{\n        width: 100,\n        height: 100,\n        sep: 0.1\n      }}\n      zOfXYT={zOfXYT}\n      colorOfXYZT={colorOfXYZT}\n      anim={{\n        init: 0,\n        update: (t) => {\n          return t + 1\n        }\n      }}\n    />\n  );\n}\n\nfunction Ripple({position}){\n  const zOfXYT = (x, y, t) => {\n    return Math.sin(0.1*(x**2 + y**2 + t));\n  }\n\n  const colorOfXYZT = (x, y, z, t) => {\n    return [0.2*Math.cos(z), z/5, 0.2] // r, g, b\n  }\n\n  return (\n    <MeshAnim\n      position={position}\n      grid={{\n        width: 100,\n        height: 100,\n        sep: 0.1\n      }}\n      zOfXYT={zOfXYT}\n      colorOfXYZT={colorOfXYZT}\n      anim={{\n        init: 0,\n        update: (t) => {\n          return t + 0.1\n        }\n      }}\n    />\n  );\n}\n\nfunction AnimationCanvas() {\n  return (\n    <Canvas\n      colorManagement\n      camera={{ position: [0, 5, 10], fov: 75 }}\n    >\n      <hemisphereLight />\n      <Suspense fallback={null}>\n        <GrowingExp position={[0,0,0]}/>\n        <Ripple position={[10,0,0]}/>\n      </Suspense>\n      <CameraControls/>\n    </Canvas>\n  );\n}\n\n\nfunction App() {\n  return (\n    <div className=\"anim\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <AnimationCanvas />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}